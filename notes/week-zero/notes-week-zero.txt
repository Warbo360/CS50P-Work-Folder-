Python Interprator:
    - program that executes/interprators (duh) actual python files (x.py)
    - Thus, Python is not only a luangauge but both really
    - To use type "python this_python_program.py" to run a Python file

Functions:
    - An action/verb like in code, base ones inlcuded with various languages (like "print()" in Python)

Arguments:
    - An input to a function that influences its behavior (so the text "hello, world" like in our hello.py file that lies in the print() function there)
        - for various functions, print() being just being one, you can pass them multiple arguments each seperated by a "," (print("hello, ", name, somethingElse) as just an example).
            - print() in Python note that if using a "+" between arguments a space is not placed automatically between the arguments but is placed there if seperated via comma ","

Side Effects:
    - An event that can be due to the execution of a function (so in this case the terminal printing out "hello, world, is the side effect)

Bugs:
    - Language errors due to me being bad at programming (more than likely anyway XD)
    - Will see alot of these
    - Example in that hello.py:

                                "$ python hello.py
                        File "/workspaces/129965715/hello.py", line 1
                            print("hello, world"
                                ^
                        SyntaxError: '(' was never closed
                        $"
    - This being due to us not closing the function with the other parenthese for the "print()" function

Return Values:
    - A function of input that takes user input/argument and can then ideally be used elsewhere in the code

Variables:
    - Just like what we think of, a place holder that can store a value of something (like in math x = 2 or some such)
    - In the computer this is stored in memory physically ofcourse
    - In general try to use variable names that help make the code more readable (so instead of x use something like userName)
        - "=" in a statement is not a standin for equivalance but is instead stating an assingment (so x = 2, really means x is assinged the value of 2)
        - So in hello.py "name = input("What's your name?")" name is being assigned the value of the side effect (which is the return value of the input function) of the input function (or in this case whatever the user happens to type back into the terminal when prompted)

Comments:
    - A way of including well comments or notes in code that the interprator/language knows to ignore, usually designtated in some way in code to let others know and of course so its ingnored in execution
    In Python comments are made via with a "#" symbol and whatever we want after (so something like: # Ask user for their name). Note in some other languages its not always an # symbol, and also sometimes comments need to be wrapped in whatever the comments symbol are (so if it was required in Python it'd be # some text here #, but Python does no require this, only needs the first one)
    - Common to use comments to structure pseudocode to help mentally structure code and then implement on top

Statment Operators:
    - operators such as "+" or "=" used in statements in various ways
        - "=": in a statement is not a standin for equivalance but is instead stating an assingment (so x = 2, really means x is assinged the value of 2)
        - "+": depending on the data type has various effects:
            - Strings(str): with strings the "+" will cancatenation them together, so "cat" + "dog", ends up being "catdog" (no space between, as stated above when using this operator)

Parameters:
    - Plausible arguments for a function in code, if actually utilized in execution of code whatever is passed is considered arugments for that particular parameter
    - Example of this in the print() function where the various parameters for it look like

        print(*objects, sep=' ', end='n\', file=sys.stdout, flush=False)

    - These all being parameters for the print() function in Python, essentially potential arguments where as:

        print("hello, world")

    - "hello, world' being the actual argument(s) actually passed to said function.
        - Breakdown of the parameters of the the print() function:
            - *objects - various objects like strs, ints, floats, etc
            - sep=' ' - Indicates that print() will seperate arguments with a blank space (thus why we don't need to add one in the strs seperated by commas, it sees it as multiple arguments, while with a "+", it sees it as all one argument)
            - end='n\' - indicates the print() function to end by moving the cursor to a new line, thus why:

                    print("some text")
                    print("some more text")

            - Outputs as:

                    some text
                    some more text

            - In the terminal, the first print() function moves the cursor to the next line before the other executes
            - file.sys.stdout - covered later
            - flush=False - covered later
        - Overall when we pass objects into the print() function (like a str), these would be positional parameters as it prints them out in the order they are written, while the parameters after that are named are just that, named parameters, which have defualt behaviors for when the programmer/user does not input anything for these values (so spec=" "), but can be modified as needed.
        - Leaves the question, how do we inlcude actual "" in string?
            - In a language like Python we can surround qouted text like so: print("'sometext'") or print('"sometext"'), as you can see it is double contained in single and double qoutes, just be consistent on what qoutes are used for what to make readability easier.
            - We can also used backslashes to makes something called an escape characters like so: print("\"sometext\"") to an equal effect, notice its the same sequence for the escape character (\") on both sides, this lets us use double qoutes twice without a syntax error at execution.
            - sub-note as well with str we can add an (f) before the qouted str to format to recognize other objects in the string such as print(f"some text and {variableHere}") where the {} indicate a variable that is cancatted with the str in the print() function
    - Another convention of parameters in functions is the ....[,x] which is just telling us this is an optional parameter you can specify by passing a comma and then some option after so with the round() function

            round(number[, ndigits]) ...... [, ndigits] is an optional parameter we can specify the round function to round to n digits after passing it a number argument, note the brackets are not needed in actual implementation, those are just there to show said parameter is optional

Methods:
    - Think of them like functions we invoke for types of data or objects
        - so like in hello.py we invoke strip() which is a str method like so:

                name.strip()

        - Which will remove the whitespace before and after the str, many methods built into Python inherently and also in other languages like Javascript and more

Data Types:
    - str - String(s), or literally strings of text, usually denoted with qoutes (either single or double) around them
    - int - Integer(s), or all numbers on the number line exluding infinities, with no decimal points (so -1, 0, 1 and both ways onward)
        - Supported int operations (+,-,*,/,%,())
            - Only special one being %, called the modulo operator, all others work just like in math. Modulo takes the remainder of the divison of one number by the other
            - Also just like in math, Python will evaluate statements with multiple sets of (()), inside from out, this applies not only to math operators as well but all datatypes
    -Float - A floating point number, or a real number with a decimal point in it.

Defining Functions:
    - We can make our own functions!
    - To initialize a function of our own we use the def keyword to give us

            def myFunction()

    - Note we can also input parameters into functions we make outselves as well, and set default behaviors for those parameters, such as:

            def myFunction(does) where does is some paramter we can pass to the function and: def myFunction(does='somethingIfNothing'), where the parameter now has a default behavior if no argument is passed to the function either by the programmer or user.

    - Note, we must be careful when we call the function we make as to make sure we are not calling it before it is defined or the terminal will spit out an error at us saying it is not defined

Code Structure
    - common practice to put bulk of code at the top, usually with the convention of def main(): at the top to signify it as the main code in the program as seen in helloFunction.py

Scope
    - Refers to the scope of which a variable is defined and exists, if for instance we only define a variable in the definition of  a function like with name = input('What is your name? ') in the main() function in helloFunction.py, it will only exist in that scope of function, so I not turn around and try and use it out of scope, all that will happen is the terminal will spit out an error saying name is not defined. Thus why we call the hello function and pass it name as a part of the main function instead of just trying to define the argument in the hello() function as name, as that will not work.




