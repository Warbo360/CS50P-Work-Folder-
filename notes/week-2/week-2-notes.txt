Week 2 - Loops

Keyword 'while' - construct that checks for some condition (so in english, while x < 2), and until condition returns false, will execute code in a loop
    - Example:

        i = 3
        while i != 0:
            print('meow')
            i = i - 1

    or

        i = 0
        while i < 3:
            print('meow')
            i = i + 1 (which is the same as 'i += 1')

Keyword 'for' - another loop construct that can go over a list of items
    - Examples:

        for i in [0 ,1 ,2]:
            print('meow')

Keyword 'list' - Data type able to hold a multitude of values ie list, example is the list showed in the for-loop above, to specify a member of a list, would be shown as (i[x]) where x is the element in that list, note counting in lists starts with zero so if you had a list from 1 to 3, called numbers, specifying the number 1 in that list would actually look like (numbers[0]).

Keyword 'range()' - Python function that will return a list of an int entered as a argument into range()

Pythonic practice note - for loops that require an iteration variable that hold no importance to the dev common practice to denote with a '_' like so with the above code:

        for _ in range(500):
            print('foo')

Python idea - for the above examples a more concise solution to this problem would be as:
        print('meow\n' * 3, end='')

which will print three lines of the text with no blank line above the CLI cursor

Keywords - 'continue' & 'break' - Used in loops, where continue is used after a conditional to then continue the loop again and break ends or breaks out of the loop
    Example -

        while True:
            n =int(input('What is n? ')):
            if n < 0:
                continue
            else:
                break
        for _ in range(n):
            print(meo)

For loops that need to iterate over lists this can be done as below:

    students = ['Hermione', 'Harry', 'Ron']

    for student in students:
        print(student)

Notice that the initerator variable is the variable student in the above case, which does not need to be intialized outside of the loop to use (in Python anyway).

Keyword - len() - Python function (and other langs as well), that will give the length of an input.

    len('students') would return an int of 3 from the above loop as there are 3 memebers of the list students

Keyword - dict - For dictionary, data type that has a list of keys with each key being associated with some value.

    students = {
        'Hermione': 'Gryffindor',
        'Harry': 'Gryffindor',
        'Ron': 'Gryffindor',
        'Draco': 'Slytherin',
    }

    print(students['Hermione'])
As you can see instead of numerical indexes as in lists we essentially changed it to whatever we want (str in the case above), and each one is associated with a value, when iterating over a dict, without specifying, the return value will be the indice itself, thus to access the indice's value we would denote that as below:


    students = {
        'Hermione': 'Gryffindor',
        'Harry': 'Gryffindor',
        'Ron': 'Gryffindor',
        'Draco': 'Slytherin',
    }

    for student in students:
        print(student, students[student])

Notice in the loop the iterator variable is the word student, and we could of made it any symbol, so the first argument for that print function will actually print whatever the indice actually is (so for indice 0 in this case it would print 'Hermione', and the secound arg is that indice's actual value so for indice 'Hermione' the value 'Gryffindor' would be printed as well)

students = [
    {'name': 'Hermione', 'House': 'Gryffindor', 'patronus': 'Otter'},
    {'name': 'Harry', 'House': 'Gryffindor', 'patronus': 'Stag'},
    {'name': 'Ron', 'House': 'Gryffindor', 'patronus': 'Jack Russel terrier'},
    {'name': 'Draco', 'House': 'Slytherin', 'patronus': 'None'},
]

The above structure is what is called a list of dictionaries, where each dictionary is given an indice in a list, and the dictionary itself containing whatever type/amount of keys and values. Also notice that for Draco has a None for the key 'patronus', which is exactly how it has to be inputted for Python (and other langs), for a distinct type of data that means none.

To iterate over a list of dicts:

for student in students:
    print(student['name'], student['House'], student['patronus'], sep=', ')

Additonal notes -
    for loops in Python can auto iterate over strings with very little difficulty on the on dev side, for example:

            example_string = 'some string here'
            for str in example_string:
                print(str, end ='')

    where the initialzed 'str' variable in the for loop will be an iterator that will scan each character in example_string, then execute whatever code is below it for each iteration(in this case for each character in example_string), which in this case is just print each character (thus, why we need to include a different behavior for end='' or else each character would be given its own line each time witht the default \n behavior)

    Also say you wanted to index certain characters in a string for conditionals lets say that could look something like this:

        for c in example_string[0:3]:
            print(c, end='')

    where the syntax exaample_string[0:3] would be a slice of that string where 0 is inclusive and and 3 would be exclusive, so that slice would be 'som' out of the 'some string here' example. So in the above example the code would only iterate over the 'som' portion of the string and preform the code blow for those iterations.

    s = Walter050W = [0:10]
    0123456789
    050 = [6:9]
    for c in s:
        if c.isnumeric:
            sub = s.strip(s[0:c])
                for sc in sub:
                    if sc.isalpha:
                        return False

