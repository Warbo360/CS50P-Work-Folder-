Week 3 Notes:

- Exceptions -

- meaning things that can go wrong in your code. Can be missing syntax. Will show up as a syntax error in the terminal generally. Example of this could be as follows:

        print('Hello, world)




        -------------------
        Terminal
        -------------------
        $ python hello.py

        SyntaxError: unterminated string literal (detected at line 1)

- A break down of the error, unterminated meaning some something started but not finished perhaps, and literal just meaning something we literally typed (in this case no closing qoute in the hello world statement, we did not terminate the the string we literally typed in the print statement)

- ValueError - wrong type of data type passed to whatever is being referenced

- try - a keyword used for error handling used with the key word - except - Example below:

        try:
            x = int(input('What's x? '))
            print(f'x is {x})
        except ValueError:
            print('x is not an integer')

- So in this block we are saying we want to try values execpt anything that would give a ValueError, and if it were to give one we give an error message to print to the user, the fewer lines of code that we try and except is best practice to isolate the errors and bugs in code, problem can arise though when we limit variables with this and assingments with '=' thus does not occur giving a NameError

- else - also used in try-except blocks as follows in case nothing does go wrong to handle:

         try:
            x = int(input('What's x? '))
        except ValueError:
            print(f'x is {x})
        else:
            print('x is not an integer')

- So here we are saying try this block of code, except when it would output a ValueError, else continue to handle as such, in this case the print() function below. In the case of an error, we can use loops to reprompt the user until they input a value that is valid:

        while True:
            try:
                x = int(input('What's x? '))
            except ValueError:
                print(f'x is {x})
            else:
                break
        print(f'x is {x}')

- So here we see because the while-loop will always be true until they pass an input that does not give a ValueError in which case breaks out of the loop and the code then progresses to the print() below. and since the loop is present now the user will be promopted over and over if they input something that would give a ValueError.

- In moments where we want to just ignore errors and not print anything to the user, we can use the key word - pass - as is below:

         while True:
            try:
                x = int(input('What's x? '))
            except ValueError:
                pass
            else:
                break
        print(f'x is {x}')

- Here we see we replaced the error message the user would of seen with the keyword - pass - this will still catch the error and essentially ignore or just 'pass' over it. This will of course still prompt the user for a valid input for the print function as intended, just depends if this would be a wanted behavior.
